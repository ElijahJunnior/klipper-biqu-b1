####################################################################################################
#     START_PRINT
####################################################################################################
[gcode_macro START_PRINT]
description: Tudo que precisa ser feito antes de iniciar a impressão!
gcode:
    
    # Carregando dimenções padrão da impressora
    {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
    {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}
    
    # Carregando variaveis
    {% set t_extruder = params.EXTRUDER_TEMP|default(190)|int %}
    {% set t_bed = params.BED_TEMP|default(60)|int %}

    # ======================================================
    # DESTIVADO ATÉ RESOLVER AS PENDENCIAS DE CONFIGURAÇÃO
    # ======================================================

    #### Carregando variaveis ####    
    # {% set filament = params.FILAMENT|default(PLA)|string %}
    # {% set    PA = printer.extruder.pressure_advance|default(0)|float %}
    #### end off definition  ####
    
    #  {% if filament == 'PET' %} ; check filament type
    #    SET_PRESSURE_ADVANCE ADVANCE=0.45
    #  {% elif filament == 'FLEX' %} 
    #    SET_PRESSURE_ADVANCE ADVANCE=0
    #  {% else %}
    #    SET_PRESSURE_ADVANCE ADVANCE={ PA }
    #  {% endif %} 

    # ======================================================
    # DESTIVADO ATÉ RESOLVER AS PENDENCIAS DE CONFIGURAÇÃO
    # ======================================================

    SET_LED_RED

    # Define a temperatura da mesa e aguarda até que ela seja atingida
    # {action_respond_info("Aquecendo a mesa")}
    M140 S{t_bed} 
    M190 S{t_bed} 

    # Define a temperatura inicial do bico
    # {action_respond_info("Pré-Aquecendo o bico")}
    M104 S160
	
    # Desativado porque ainda não sei oque faz
    # SET_GCODE_OFFSET Z=0 MOVE=1

    # Faz o homme de todos os eixos
    # {action_respond_info("Fazendo o HOME")}
    G28

    # Carrega o BAD MESH default
    # {action_respond_info("Carregando o perfil de nivelamento da mesa")}
    BED_MESH_PROFILE LOAD=DEFAULT

    # Refaz a BAD MESH
    #BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}


    # {action_respond_info("Aquecendo o bico")}
    # Muda o modo de deslocamento para cordenadas absolutas
    G90
    
    # Move o bico para a posição de descanso
    G1 X10 Y200 F5000.0 

    # Define a temperatura inicial do bico e aguarda ela ser atingida
    M104 S{t_extruder}
    M109 S{t_extruder}

    # 
    SET_LED_WHITE

    # Imprime uma linha para limpar o bico
    PRIME_LINE

    # Desativado porque ainda não sei oque faz
    #M83                ; Relative extruder mode.

    # Reseta a extrusão
    G92 E0

    # Emiti um som para alertar o inicio da impressão - Desativado até configurar o BEEP
    M300 S880 P250
    M300 S880 P250
    M300 S880 P250
    
    # M117 Bora lá começar a impressão!
    # {action_respond_info("Bora lá começar a impressão!")}
    
    ##### USE ESSE COMANDO NO SLICER #################
    # START_PRINT BED_TEMP={material_bed_temperature} EXTRUDER_TEMP={material_print_temperature}
    ##################################################

####################################################################################################
#     END_PRINT
####################################################################################################

[gcode_macro END_PRINT]
gcode:
    SET_LED_BLUE
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Move to left back position
    G1 X10 Y200 F5000.0 
    # Disable steppers
    M84

####################################################################################################
#     CANCEL_PRINT
####################################################################################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  # Define a cor do LED
  SET_LED_RED
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

####################################################################################################
#     PAUSE
####################################################################################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  # Define a cor do LED
  SET_LED_YELLOW
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

####################################################################################################
#     RESUME
####################################################################################################

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  SET_LED_WHITE
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}

####################################################################################################
#     PRIME_LINE
####################################################################################################


[gcode_macro PRIME_LINE]
gcode: 
    M117 Prime Nozzle
    {action_respond_info("Imprimindo a Prime Line")}

    G90                 ; Absolute coordinates.
    #M83                 ; Relative extruder mode.
    G92 E0

    # Move to prime position 
    G1 X5.0 Y30 Z0.24 F5000.0 

    # set coordinates to relative
    G91; 
    
    #Start Prime Line
    G1 Y180 F1500.0 E15 ;Draw the first line (extruding 15mm)
    G1 X1 F5000.0 ;Move to side a little
    G1 Y-150 Z0.2 F1500.0 E25 ;Draw the second line
    G1 E-0.5 F3000      ; Retract to avoid stringing.
    G1 Y1 E0 F1000    ; Wipe back to break string.
    G1 Y-6 E0 F1000   ; Wipe forward to break string.

####################################################################################################
# G29 - BED MESH CALIBRATE
####################################################################################################

[gcode_macro G29]
gcode:
  {% set t = params.T|default(0)|float %}

  {% if printer.idle_timeout.state == "Printing" %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    SAVE_GCODE_STATE NAME=G29_state
    G90
    G1 Z10 F240
    {% if t > 30.0 %}
      M190 S{t}
    {% endif %}
    BED_MESH_CALIBRATE
    {% if 'S' in params %}
      M140 S{params.S}
    {% endif %}
    G90
    G1 Z10 F240
    G1 X150 Y155 F6000
    RESTORE_GCODE_STATE NAME=G29_state MOVE=0
  {% endif %}

####################################################################################################
# M600 - CHANGE FILAMENT
####################################################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

####################################################################################################
# CHANGE FILAMENT_UNLOAD
####################################################################################################

[gcode_macro FILAMENT_UNLOAD]
gcode:
    ;M109 S185 ;set temp and wait for unload 
    M83
    G0 E-300 F1500
    G0 E-200 F800
    M82 
    M300 S880 P100
    M300 S440 P100
    ;M109 S0 ;set temp FOR COOLDOWN 

####################################################################################################
# CHANGE FILAMENT_LOAD
####################################################################################################

[gcode_macro FILAMENT_LOAD]
gcode:
     ;M109 S185 ;set temp and wait for load 
      M83 
      G0 E50 F3000
      G0 E50 F3000
      G0 E50 F3000
      G0 E50 F3000
      G0 E50 F3000
      G0 E50 F1500
      G0 E50 F1500
      G0 E50 F1500
      G0 E50 F750
      G0 E30 F600
      G0 E50 F300
      M82
      M300 S440 P100
      M300 S880 P100
      ;M109 S0 ;set temp FOR COOLDOWN 

####################################################################################################
# LED 
####################################################################################################
[gcode_macro SET_LED_WHITE]
gcode:
  SET_LED LED=my_neopixel RED=0.25 GREEN=0.25 BLUE=0.25 SYNC=0

[gcode_macro SET_LED_RED]
gcode:
  SET_LED LED=my_neopixel RED=0.25 GREEN=0 BLUE=0 SYNC=0

[gcode_macro SET_LED_GREEN]
gcode:
  SET_LED LED=my_neopixel RED=0 GREEN=0.25 BLUE=0 SYNC=0

[gcode_macro SET_LED_BLUE]
gcode:
  SET_LED LED=my_neopixel RED=0 GREEN=0 BLUE=0.25 SYNC=0

[gcode_macro SET_LED_YELLOW]
gcode:
  SET_LED LED=my_neopixel RED=0.255 GREEN=0.255 BLUE=0 SYNC=0

[gcode_macro SET_LED_OFF]
gcode:
  SET_LED LED=my_neopixel RED=0 GREEN=0 BLUE=0 SYNC=0



####################################################################################################
# XBOT BEEP
####################################################################################################

# [gcode_macro M300]
# gcode:
#     {% set S = params.S|default(1000)|int %}
#     {% set P = params.P|default(100)|int %}
#         SET_PIN PIN=BEEPER_Pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#     G4 P{P}
#         SET_PIN PIN=BEEPER_Pin VALUE=0

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
      #SET_PIN PIN=Case_Light VALUE=0
      #SET_PIN PIN=LCD_Light VALUE=0
    {% if S > 0 %}
      SET_PIN PIN=BEEPER_Pin VALUE=0.5 CYCLE_TIME={ 1.0/S }
      #SET_PIN PIN=Case_Light VALUE=0.5 CYCLE_TIME={ 1.0/S }
      #SET_PIN PIN=LCD_Light VALUE=0.5 CYCLE_TIME={ 1.0/S }
      G4 P{P}
    {% else %}
      G4 P{P}
    {% endif %}
      SET_PIN PIN=BEEPER_Pin VALUE=0
      #SET_PIN PIN=Case_Light VALUE=1
      #SET_PIN PIN=LCD_Light VALUE=1

[gcode_macro PLAY_MELODY]
gcode:
    M300 P75 S659
    M300 P90 S659
    M300 P75 S659
    #G4 P155
    M300 P75 S0
    #G4 P158
    M300 P75 S523
    #G4 P156
    M300 P75 S659
    #G4 P155
    M300 P75 S0
    #G4 P158
    M300 P100 S784
    #G4 P311
    M300 P100 S0
    #G4 P314
    M300 P100 S392
    #G4 P311
    M300 P100 S0
    #G4 P314

####################################################################################################
# SCREWS
####################################################################################################
[gcode_macro SCREW_TILT]
gcode:
  SCREWS_TILT_CALCULATE

####################################################################################################
# BED MESH
####################################################################################################

[gcode_macro LOAD_MESH_95]
gcode:
  BED_MESH_PROFILE LOAD="95"

[gcode_macro LOAD_MESH_85]
gcode:
  BED_MESH_PROFILE LOAD="85"

[gcode_macro LOAD_MESH_75]
gcode:
  BED_MESH_PROFILE LOAD="75"

[gcode_macro LOAD_MESH_65]
gcode:
  BED_MESH_PROFILE LOAD="65"

[gcode_macro CREATE_MESH]
gcode: 
  {% set name = params.NAME|default("DEFAULT")|string %}
  {% set temp = params.TEMP|default(60)|int %}

  M140 S{temp} 

  G28
  
  M190 S{temp}

  BED_MESH_CALIBRATE profile={name}

  SAVE_CONFIG

####################################################################################################
# KLIPPER BACKUP
####################################################################################################
[gcode_macro RUN_BAKUP]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True

  